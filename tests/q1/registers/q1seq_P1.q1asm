waveforms={
    }

weights={
    }

acquisitions={}

seq_prog="""
# --INIT-- 
           wait_sync      4          # L0001 t=0
# --START-- (t=0) 
_start:    reset_ph                  # L0002 @ 0
           upd_param      1000       # L0003 t=0
# awg_offset = 0.0, None t=1000 
           set_awg_offs   0,0        # L0004 @ 1000
           upd_param      4          # L0005 t=1000
# R.a:int = 10 
           move           10,R1      # L0006 R1: R.a
# R.b:int = R.a + 1 
           nop                       # L0007  add wait for R1
           add            R1,1,R2    # L0008 R2: R.b
# R.b:int = 5 + R.a + 1 
           add            R1,5,R3    # L0009 temp R3
           nop                       # L0010  add wait for R3
           add            R3,1,R2    # L0011 
# R.c:int = R.b + R.a 
           nop                       # L0012  add wait for R2
           add            R2,R1,R3   # L0013 R3: R.c
# R.c:int = R.c + 5 
           nop                       # L0014  add wait for R3
           add            R3,5,R3    # L0015 
# R.c:int = R.c - 17 
           nop                       # L0016  sub wait for R3
           sub            R3,17,R3   # L0017 
# R.d:int = 1 - R.a 
           move           1,R5       # L0018 temp ['R5']
           nop                       # L0019  sub wait for R5
           sub            R5,R1,R4   # L0020 
# R.e:int = R.a << 2 
           asl            R1,2,R5    # L0021 R5: R.e
# R.f:int = R.a >> 2 
#          --- emulate signed ASR 
           and            R1,2147483648,R7 # L0022 temp R7
           asr            R1,2,R6    # L0023 
           jlt            R7,2147483648,@asr_end0 # L0024 
           or             R6,3758096384,R6 # L0025 
# R.h:int = R.d >> 2 
#          --- emulate signed ASR 
asr_end0:  and            R4,2147483648,R8 # L0026 temp R8
           asr            R4,2,R7    # L0027 
           jlt            R8,2147483648,@asr_end1 # L0028 
           or             R7,3758096384,R7 # L0029 
# R.x:float = 1.0 
asr_end1:  move           2147483647,R8 # L0030 R8: R.x
# R.x:float = R.x - 0.8 
           nop                       # L0031  sub wait for R8
           sub            R8,1717986918,R8 # L0032 
# R.y:float = 0.5 
           move           1073741823,R9 # L0033 R9: R.y
# R.z:float = R.x - R.y 
           nop                       # L0034  sub wait for R9
           sub            R8,R9,R10  # L0035 R10: R.z
# Rs.x:int = 9 
           move           9,R11      # L0036 R11: Rs.x
# Rs.y:int = Rs.x + R.b 
           nop                       # L0037  add wait for R11
           add            R11,R2,R12 # L0038 R12: Rs.y
# Rs.a:int = 3 
           move           3,R13      # L0039 R13: Rs.a
# Rs.b:int = Rs.a & 5 
           nop                       # L0040  and wait for R13
           and            R13,5,R14  # L0041 R14: Rs.b
# Rs.c:int = Rs.a | 5 
           or             R13,5,R15  # L0042 R15: Rs.c
# Rs.d:int = 5 ^ Rs.a 
           xor            R13,5,R16  # L0043 R16: Rs.d
# Rs.e:int = ~Rs.a 
           not            R13,R17    # L0044 R17: Rs.e
# --END-- 
           stop                      # L0045 
"""

