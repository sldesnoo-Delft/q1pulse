waveforms={
    }

weights={
    }

acquisitions={}

seq_prog="""
# --INIT-- 
           move           0,R0       # L0001 R0: _zero
           move           3,R1       # L0002 R1: _repetitions
           wait_sync      100        # L0003 t=0
# --START-- (t=0) 
_start:    reset_ph                  # L0004 @ 0
# block_pulse(200, -0.1, None) 
# awg_offset = -0.1, None t=0 
           set_awg_offs   -3277,0    # L0005 @ 0
           upd_param      200        # L0006 t=0
# awg_offset = 0.0, None t=200 
           set_awg_offs   0,0        # L0007 @ 200
# loop_range(20, 100, 20):R._var0 t=200 
           move           20,R2      # L0008 R2: R._var0
           move           4,R3       # L0009 R3: R._cnt0
# block_pulse(20, 0.8, None) 
# awg_offset = 0.8, None t=200 
loop_0:    set_awg_offs   26214,0    # L0010 @ 200
           upd_param      20         # L0011 t=200
# awg_offset = 0.0, None t=220 
           set_awg_offs   0,0        # L0012 @ 220
           upd_param      224        # L0013 t=220
# wait(R._var0) t=220 
           sub            R2,4,R4    # L0014 R4: _waittime
#          --- check for negative wait time 
#          --- emulate signed wait time 
           nop                       # L0015  xor wait for R4
           xor            R4,2147483648,R5 # L0016 temp ['R5']
           nop                       # L0017  jge wait for R5
           jge            R5,2147483652,@waitc1 # L0018 
           illegal                   # L0019 negative wait time
waitc1:    jlt            R4,65532,@endwait1 # L0020 
wait1:     wait           65528      # L0021 
           sub            R4,65528,R4 # L0022 
           nop                       # L0023  jge wait for R4
           jge            R4,65532,@wait1 # L0024 
endwait1:  wait           R4         # L0025 
# endloop t=440 
           add            R2,20,R2   # L0026 
           loop           R3,@loop_0 # L0027 
# loop_range(-2, 2, 1):R._var1 t=440 
           move           4294967294,R2 # L0028 R2: R._var1
           move           4,R3       # L0029 R3: R._cnt1
# block_pulse(20, 0.2, None) 
# awg_offset = 0.2, None t=440 
loop_1:    set_awg_offs   6553,0     # L0030 @ 440
           upd_param      20         # L0031 t=440
# awg_offset = 0.0, None t=460 
           set_awg_offs   0,0        # L0032 @ 460
           upd_param      100        # L0033 t=460
# endloop t=560 
           add            R2,1,R2    # L0034 
           loop           R3,@loop_1 # L0035 
           upd_param      100        # L0036 t=560
# loop_range(80, 0, -20):R._var2 t=660 
           move           80,R2      # L0037 R2: R._var2
           move           5,R3       # L0038 R3: R._cnt2
# block_pulse(20, 0.1, None) 
# awg_offset = 0.1, None t=660 
loop_2:    set_awg_offs   3276,0     # L0039 @ 660
           upd_param      20         # L0040 t=660
# awg_offset = 0.0, None t=680 
           set_awg_offs   0,0        # L0041 @ 680
           upd_param      4          # L0042 t=680
# wait(R._var2 + 20) t=680 
           add            R2,20,R4   # L0043 temp R4
           nop                       # L0044  sub wait for R4
           sub            R4,4,R5    # L0045 R5: _waittime
#          --- check for negative wait time 
#          --- emulate signed wait time 
           nop                       # L0046  xor wait for R5
           xor            R5,2147483648,R6 # L0047 temp ['R6']
           nop                       # L0048  jge wait for R6
           jge            R6,2147483652,@waitc2 # L0049 
           illegal                   # L0050 negative wait time
waitc2:    jlt            R5,65532,@endwait2 # L0051 
wait2:     wait           65528      # L0052 
           sub            R5,65528,R5 # L0053 
           nop                       # L0054  jge wait for R5
           jge            R5,65532,@wait2 # L0055 
endwait2:  wait           R5         # L0056 
# endloop t=680 
           add            R2,4294967276,R2 # L0057 
           loop           R3,@loop_2 # L0058 
# --END-- 
           loop           R1,@_start # L0059 
           upd_param      4          # L0060 t=680
           stop                      # L0061 
"""

